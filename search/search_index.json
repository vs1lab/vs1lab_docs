{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Laboranleitung Diese Anleitung ist als Starthilfe gedacht, um Studenten die ersten Schritte im Labor \"Verteilte Systeme 1\" zu erleichtern. Letztes Update (Sommer 2021): Armin Kunkel, Benjamin Schliebitz, Felix Nagy, Niklas Gadermann, Stephan Westphal Organisatorisches Beim VS1 Labor handelt es sich um Gruppenarbeit . Der Quellcode muss vor der Abnahme im ILIAS hochgeladen werden. Die Abgabetermine sind dem ILIAS Kurs zu entnehmen, wobei Korrekturen bis Freitag nachgereicht (hochgeladen) werden m\u00fcssen. Bei Korrekturen erfolgt dann eine weitere Abnahme beim n\u00e4chsten Termin. Bei jeder Abgabe muss jedes Teammitglied (virtuell) anwesend sein. Wenn ein Gruppenmitglied bei der Abgabe nicht anwesend war, so kann er diese, unter Vorlage einer Begr\u00fcndung f\u00fcr die Abwesenheit, nachholen. Wichtig bei der Abgabe ist au\u00dferdem, dass jedes Mitglied der Gruppe den Code verstanden hat. Es ist daher nicht ausreichend, wenn eine einzelne Person den gesamten Code vorstellt. Es gibt eine Bonusaufgabe, welche nicht abgegeben werden muss, um das Labor zu bestehen. Es ist jedoch zu empfehlen, die Aufgabe zu bearbeiten, da deren Abgabe mit Bonuspunkten f\u00fcr die Klausur belohnt wird. Ablauf der Abgabe Die Verwaltung der Gruppe erfolgt im Ilias. Hier wird die L\u00f6sung hochgeladen und es kann auch \u00fcberpr\u00fcft werden, ob die Aufgabe als bestanden eingetragen wurde. Die verpflichtende Besprechung der Aufgabe mit den Tutoren erfolgt in Teams. Im Ilias erstellt eine Person ein Team und kann mithilfe der K\u00fcrzel die Gruppenmitglieder hinzuf\u00fcgen. Die L\u00f6sung der Aufgabe wird ins Ilias hochladen z.B. als zip-Archiv In Teams den zur Aufgabe passenden Kanal \u00f6ffnen\\ (F\u00fcr Aufgabe 1 den Kanal \"Labor Aufgabe 1 -- HTML und CSS\" verwenden) Unter dem Reiter Anmeldeliste eine neue Aufgabe erstellen mit den Microsoft Teams Namen der Gruppenmitglieder Die Gruppenmitglieder werden von einem Tutor zu einer Besprechung eingeladen Nach erfolgreicher Abgabe tr\u00e4gt der Tutor die Aufgabe als bestanden ein Die Aufgabenstellung Im Laufe des Semesters soll eine Single-Page-Webanwendung entstehen mit der ihr interessante Orte in Form von GeoTags speichern, verwalten und teilen k\u00f6nnt. Die \"Geo Tagging App\" besteht im Grunde aus zwei Komponenten: Der Tagging-Bereich Hier k\u00f6nnen neue GeoTags durch die Eingabe aller Attribute (L\u00e4ngen-/ und Breitengrad der Koordinate, Name und Hashtag) angelegt werden. Der Discovery-Bereich Der Discovery-Bereich ist etwas komplexer aufgebaut. Er besteht zum einen aus einer Liste und einer Karte, in denen bereits erstellte GeoTags in einem bestimmten Umkreis angezeigt werden. Au\u00dferdem bietet das Formular im oberen Bereich der Discovery-Komponente die M\u00f6glichkeit bestehende GeoTags anhand eines Suchbegriffs zu filtern. Nat\u00fcrlich m\u00fcsst ihr die komplette Anwendung nicht von Grund auf selbst konzipieren. Herr Professor Zirpins stellt euch auf Github eine Art Vorlageprojekt zur Verf\u00fcgung, in dem der grunds\u00e4tzliche Aufbau der Web-App, sowie die wichtigsten Komponenten bereits definiert und teilweise implementiert sind. In den Vorlagen ist auch immer genau gekennzeichnet, an welchen Stellen noch etwas fehlt bzw. wo eure L\u00f6sung hin soll. Wie ihr diese Vorlage auf die Poolrechner oder eure eigenen Rechner bekommt seht ihr im n\u00e4chsten Kapitel. Um die Web-Anwendung fertig zu stellen, m\u00fcsst ihr im Laufe des Semesters nach und nach Teilaufgaben l\u00f6sen, die sich mit der praktischen Umsetzung von (aus der Vorlesung bekannten) Webtechnologien besch\u00e4ftigen. Diese Aufgaben sind wie folgt gegliedert: Aufgabe 1 In Aufgabe 1 sollt ihr die Oberfl\u00e4che der Geo Tagging App fertigstellen. Im Vorlagen Projekt findet ihr die Dateien 'index.html' und 'style.css', die entsprechend angepasst werden m\u00fcssen. index.html: Das HTML Grundger\u00fcst muss um die Formulare f\u00fcr das Tagging und das Suchen erg\u00e4nzt werden. Zu beachten ist hier, dass auch die Funktionalit\u00e4t und Validierung mir HTML5-Mitteln umgesetzt werden soll. style.css: \u00dcber die Anpassung des Stylesheets der Geo Tagging App soll das visuelle Design der App optimiert werden. Dazu geh\u00f6rt, dass sich das Layout an verschiedene Endger\u00e4te anpasst (responsive web page). Dies wird durch die Verwendung eines Grid Layout mit Flexbox erreicht. Aufgabe 2 In Aufgabe 2 soll dann das clientseitige JavaScript so angepasst werden, dass die aktuellen Koordinaten automatisch in die entsprechenden Eingabefelder eingetragen werden. Au\u00dferdem soll im Discovery Bereich, statt einer statischen, eine dynamisch generierte Karte mit allen vorhandenen GeoTags angezeigt werden. Tip Falls ihr nicht wisst, wo ihr ansetzen sollt, schaut mal in die Kommentare der 'geotagging.js' Datei. Vielleicht wird es dadurch etwas klarer. Aufgabe 3 Die dritte Aufgabe besch\u00e4ftigt sich mit dem serverseitigen Teil der Geo Tagging App. Dieser wird ben\u00f6tigt um GeoTags auf dem Server abzulegen und bestehende Tags zu filtern. Im serverseitigen Script m\u00fcssen gem\u00e4\u00df der Aufgabenstellung Daten-/ und Verwaltungsstrukturen f\u00fcr die GeoTags definiert werden. Au\u00dferdem m\u00fcsst ihr das Verhalten f\u00fcr verschiedene Routen festlegen, in denen bestimmten Requests verarbeitet werden und dynamisch erzeugte Ansichten als Response an den Client zur\u00fcckgeliefert werden. Diese Ansichten werden mit der Template-Engine EJS generiert. Beispiele f\u00fcr die Verwendung findet ihr z.B. unter https://github.com/mde/ejs/wiki/Using-EJS-with-Express und https://ejs.co/#install . Hier werdet ihr auch zum ersten mal die JavaScript Laufzeitumgebung node.js und den darin enthaltenen Paketmanager npm verwenden. Ladet euch dazu zun\u00e4chst auf https://nodejs.org die f\u00fcr eure Plattform ben\u00f6tigten Installationsdateien herunter und installiert Node.js (auf den Pool-Rechnern schon installiert). Alles weitere k\u00f6nnt ihr der offiziellen Aufgabenstellung entnehmen. Aufgabe 4 In dieser Aufgabe sollen eigentliche keine neuen Features entwickelt werden. Haupts\u00e4chlich geht es darum, die Performanz der Anwendung durch asynchrone Kommunikation zwischen Client und Server zu optimieren. Ihr m\u00fcsst dazu neue Routen auf der Serverseite festlegen, die die Funktionalit\u00e4t einer REST-Api bereitstellen. Au\u00dferdem m\u00fcsst ihr das clientseitige JavaScript so anpassen, dass das Speichern und Filtern von GeoTags asynchron \u00fcber AJAX abgehandelt wird. Somit umgeht ihr, dass bei jedem Speichern und Filtern die komplette Seite serverseitig generiert und \u00fcbermittelt werden muss. Wenn ihr euer Serverscript entsprechend angepasst habt und eure REST-Schnittstelle vorab testen wollt, empfiehlt es sich diese mit einem generischen REST Client zu testen. Zu empfehlen sind hier Insomnia/Postman: GUI Programme um requests zu erstellen und zu senden Hoppscotch: Browser-Extension, \u00e4hnlich wie Insonmia/Postman aber ohne Download und mit google-docs like cloud-speicherung VS-Code rest client: Extension mit der sich Requests die in Textform in einer Datei stehen absenden lassen k\u00f6nnen Curl: Command-line-interface f\u00fcr die Production-Ready http bibliothek libcurl Durch das Testen k\u00f6nnt ihr Fehler fr\u00fchzeitig ausfindig machen und beheben und spart euch sp\u00e4ter viel \u00c4rger mit l\u00e4stigem debuggen. Die genaue Aufgabenbeschreibung findet ihr in den README.md Dateien im Ordner der jeweiligen Aufgabe. Tip Auf https://www.w3schools.com/ findet ihr viele Tutorials und Beispiele zu den g\u00e4ngigsten Web Technologien. Ein Blick lohnt sich auf alle F\u00e4lle!!!","title":"Laboranleitung"},{"location":"#laboranleitung","text":"Diese Anleitung ist als Starthilfe gedacht, um Studenten die ersten Schritte im Labor \"Verteilte Systeme 1\" zu erleichtern. Letztes Update (Sommer 2021): Armin Kunkel, Benjamin Schliebitz, Felix Nagy, Niklas Gadermann, Stephan Westphal","title":"Laboranleitung"},{"location":"#organisatorisches","text":"Beim VS1 Labor handelt es sich um Gruppenarbeit . Der Quellcode muss vor der Abnahme im ILIAS hochgeladen werden. Die Abgabetermine sind dem ILIAS Kurs zu entnehmen, wobei Korrekturen bis Freitag nachgereicht (hochgeladen) werden m\u00fcssen. Bei Korrekturen erfolgt dann eine weitere Abnahme beim n\u00e4chsten Termin. Bei jeder Abgabe muss jedes Teammitglied (virtuell) anwesend sein. Wenn ein Gruppenmitglied bei der Abgabe nicht anwesend war, so kann er diese, unter Vorlage einer Begr\u00fcndung f\u00fcr die Abwesenheit, nachholen. Wichtig bei der Abgabe ist au\u00dferdem, dass jedes Mitglied der Gruppe den Code verstanden hat. Es ist daher nicht ausreichend, wenn eine einzelne Person den gesamten Code vorstellt. Es gibt eine Bonusaufgabe, welche nicht abgegeben werden muss, um das Labor zu bestehen. Es ist jedoch zu empfehlen, die Aufgabe zu bearbeiten, da deren Abgabe mit Bonuspunkten f\u00fcr die Klausur belohnt wird.","title":"Organisatorisches"},{"location":"#ablauf-der-abgabe","text":"Die Verwaltung der Gruppe erfolgt im Ilias. Hier wird die L\u00f6sung hochgeladen und es kann auch \u00fcberpr\u00fcft werden, ob die Aufgabe als bestanden eingetragen wurde. Die verpflichtende Besprechung der Aufgabe mit den Tutoren erfolgt in Teams. Im Ilias erstellt eine Person ein Team und kann mithilfe der K\u00fcrzel die Gruppenmitglieder hinzuf\u00fcgen. Die L\u00f6sung der Aufgabe wird ins Ilias hochladen z.B. als zip-Archiv In Teams den zur Aufgabe passenden Kanal \u00f6ffnen\\ (F\u00fcr Aufgabe 1 den Kanal \"Labor Aufgabe 1 -- HTML und CSS\" verwenden) Unter dem Reiter Anmeldeliste eine neue Aufgabe erstellen mit den Microsoft Teams Namen der Gruppenmitglieder Die Gruppenmitglieder werden von einem Tutor zu einer Besprechung eingeladen Nach erfolgreicher Abgabe tr\u00e4gt der Tutor die Aufgabe als bestanden ein","title":"Ablauf der Abgabe"},{"location":"#die-aufgabenstellung","text":"Im Laufe des Semesters soll eine Single-Page-Webanwendung entstehen mit der ihr interessante Orte in Form von GeoTags speichern, verwalten und teilen k\u00f6nnt. Die \"Geo Tagging App\" besteht im Grunde aus zwei Komponenten:","title":"Die Aufgabenstellung"},{"location":"#der-tagging-bereich","text":"Hier k\u00f6nnen neue GeoTags durch die Eingabe aller Attribute (L\u00e4ngen-/ und Breitengrad der Koordinate, Name und Hashtag) angelegt werden.","title":"Der Tagging-Bereich"},{"location":"#der-discovery-bereich","text":"Der Discovery-Bereich ist etwas komplexer aufgebaut. Er besteht zum einen aus einer Liste und einer Karte, in denen bereits erstellte GeoTags in einem bestimmten Umkreis angezeigt werden. Au\u00dferdem bietet das Formular im oberen Bereich der Discovery-Komponente die M\u00f6glichkeit bestehende GeoTags anhand eines Suchbegriffs zu filtern. Nat\u00fcrlich m\u00fcsst ihr die komplette Anwendung nicht von Grund auf selbst konzipieren. Herr Professor Zirpins stellt euch auf Github eine Art Vorlageprojekt zur Verf\u00fcgung, in dem der grunds\u00e4tzliche Aufbau der Web-App, sowie die wichtigsten Komponenten bereits definiert und teilweise implementiert sind. In den Vorlagen ist auch immer genau gekennzeichnet, an welchen Stellen noch etwas fehlt bzw. wo eure L\u00f6sung hin soll. Wie ihr diese Vorlage auf die Poolrechner oder eure eigenen Rechner bekommt seht ihr im n\u00e4chsten Kapitel. Um die Web-Anwendung fertig zu stellen, m\u00fcsst ihr im Laufe des Semesters nach und nach Teilaufgaben l\u00f6sen, die sich mit der praktischen Umsetzung von (aus der Vorlesung bekannten) Webtechnologien besch\u00e4ftigen. Diese Aufgaben sind wie folgt gegliedert:","title":"Der Discovery-Bereich"},{"location":"#aufgabe-1","text":"In Aufgabe 1 sollt ihr die Oberfl\u00e4che der Geo Tagging App fertigstellen. Im Vorlagen Projekt findet ihr die Dateien 'index.html' und 'style.css', die entsprechend angepasst werden m\u00fcssen. index.html: Das HTML Grundger\u00fcst muss um die Formulare f\u00fcr das Tagging und das Suchen erg\u00e4nzt werden. Zu beachten ist hier, dass auch die Funktionalit\u00e4t und Validierung mir HTML5-Mitteln umgesetzt werden soll. style.css: \u00dcber die Anpassung des Stylesheets der Geo Tagging App soll das visuelle Design der App optimiert werden. Dazu geh\u00f6rt, dass sich das Layout an verschiedene Endger\u00e4te anpasst (responsive web page). Dies wird durch die Verwendung eines Grid Layout mit Flexbox erreicht.","title":"Aufgabe 1"},{"location":"#aufgabe-2","text":"In Aufgabe 2 soll dann das clientseitige JavaScript so angepasst werden, dass die aktuellen Koordinaten automatisch in die entsprechenden Eingabefelder eingetragen werden. Au\u00dferdem soll im Discovery Bereich, statt einer statischen, eine dynamisch generierte Karte mit allen vorhandenen GeoTags angezeigt werden. Tip Falls ihr nicht wisst, wo ihr ansetzen sollt, schaut mal in die Kommentare der 'geotagging.js' Datei. Vielleicht wird es dadurch etwas klarer.","title":"Aufgabe 2"},{"location":"#aufgabe-3","text":"Die dritte Aufgabe besch\u00e4ftigt sich mit dem serverseitigen Teil der Geo Tagging App. Dieser wird ben\u00f6tigt um GeoTags auf dem Server abzulegen und bestehende Tags zu filtern. Im serverseitigen Script m\u00fcssen gem\u00e4\u00df der Aufgabenstellung Daten-/ und Verwaltungsstrukturen f\u00fcr die GeoTags definiert werden. Au\u00dferdem m\u00fcsst ihr das Verhalten f\u00fcr verschiedene Routen festlegen, in denen bestimmten Requests verarbeitet werden und dynamisch erzeugte Ansichten als Response an den Client zur\u00fcckgeliefert werden. Diese Ansichten werden mit der Template-Engine EJS generiert. Beispiele f\u00fcr die Verwendung findet ihr z.B. unter https://github.com/mde/ejs/wiki/Using-EJS-with-Express und https://ejs.co/#install . Hier werdet ihr auch zum ersten mal die JavaScript Laufzeitumgebung node.js und den darin enthaltenen Paketmanager npm verwenden. Ladet euch dazu zun\u00e4chst auf https://nodejs.org die f\u00fcr eure Plattform ben\u00f6tigten Installationsdateien herunter und installiert Node.js (auf den Pool-Rechnern schon installiert). Alles weitere k\u00f6nnt ihr der offiziellen Aufgabenstellung entnehmen.","title":"Aufgabe 3"},{"location":"#aufgabe-4","text":"In dieser Aufgabe sollen eigentliche keine neuen Features entwickelt werden. Haupts\u00e4chlich geht es darum, die Performanz der Anwendung durch asynchrone Kommunikation zwischen Client und Server zu optimieren. Ihr m\u00fcsst dazu neue Routen auf der Serverseite festlegen, die die Funktionalit\u00e4t einer REST-Api bereitstellen. Au\u00dferdem m\u00fcsst ihr das clientseitige JavaScript so anpassen, dass das Speichern und Filtern von GeoTags asynchron \u00fcber AJAX abgehandelt wird. Somit umgeht ihr, dass bei jedem Speichern und Filtern die komplette Seite serverseitig generiert und \u00fcbermittelt werden muss. Wenn ihr euer Serverscript entsprechend angepasst habt und eure REST-Schnittstelle vorab testen wollt, empfiehlt es sich diese mit einem generischen REST Client zu testen. Zu empfehlen sind hier Insomnia/Postman: GUI Programme um requests zu erstellen und zu senden Hoppscotch: Browser-Extension, \u00e4hnlich wie Insonmia/Postman aber ohne Download und mit google-docs like cloud-speicherung VS-Code rest client: Extension mit der sich Requests die in Textform in einer Datei stehen absenden lassen k\u00f6nnen Curl: Command-line-interface f\u00fcr die Production-Ready http bibliothek libcurl Durch das Testen k\u00f6nnt ihr Fehler fr\u00fchzeitig ausfindig machen und beheben und spart euch sp\u00e4ter viel \u00c4rger mit l\u00e4stigem debuggen. Die genaue Aufgabenbeschreibung findet ihr in den README.md Dateien im Ordner der jeweiligen Aufgabe. Tip Auf https://www.w3schools.com/ findet ihr viele Tutorials und Beispiele zu den g\u00e4ngigsten Web Technologien. Ein Blick lohnt sich auf alle F\u00e4lle!!!","title":"Aufgabe 4"},{"location":"Laborhilfe/","text":"Laborhilfe Aufgabe_1 TEIL A \u2013 HTML https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input Head Metadaten meta charset = \u201eUTF-8\": Kodierung in UTF-8 Characters meta name = \u201eviewport\": Display-Information, Display-Gr\u00f6\u00dfe vom Ger\u00e4t meta content = \u201econtent\": Enth\u00e4lt Wert vom Element gekennzeichnet durch \u201ename\" title: Beschreibung im Tab link: rel: Relationship zum verlinkten Dokmuent href: Pfad/ Link-URL Body Inhalt der GeoLocationApp - Header : Obere Leiste, meist mit Logo, Titel, Navigation - Main: Hauptinhalt mit Vielzahl an verschiedenen Strukturelementen - Footer : Untere Leiste meist mit Kontakt, Impressum, Copyright, Sitemap Class-Attribut Globales Attribut Durch Leerzeichen-getrennte Liste von Case-Sensitive Element-Klassen Erlauben die Auswahl und Zugang von CSS und JavaScript zu spezifischen Elementen durch Class-Selectors (z.B. documtent.getElementByClassName) Header nav : Section-Element einer Seite die Links zu anderen Seiten enth\u00e4lt (Navigation) Main section : Abschnitt, meist eines Textes, sollten immer eine \u00dcberschrift haben Child -Elements: \u00dcberschriften, Formulare, div-Container, und mehr. form : Sektion mit interaktiven Controls/ Feldern, um Informationen geb\u00fcndelt zu senden Attribute id: Eindeutiger Bezeichner f\u00fcr Formular action : URL, die das Submit der gesendeten Formular-Infos bearbeitet method : http Methode mit der submitted wird Post : Daten als Request Body gesendet Get : Daten beigef\u00fcgt mit ? seperator (Seitenanfrage), ohne selber Infos zu schicken Child-Elements: fieldset h1 bis h8: \u00dcberschriften (h1 gr\u00f6\u00dfte, h8 kleinste) div: Container zur Isolierung von verschiedenen flow contents M\u00f6glich verschiedene div-Container verschieden zu Stylen Kapselt Informationen voneinander (unterschiedliche Darstellung) Flow Content : Alle Strukturelemente, die direkte Child-Elemente von \\<body> sind Kein Flow Content: \\<td>, da es nur als direkter Child von \\<table> genutzt werden kann ul: Ungeordnete Liste (unordered list = ul) mit einfachen Aufz\u00e4hlungspunkten ol : Geordnete Liste (ordered list = ol) mit Nummerierung li: Listen-Element (list item = li) von einer Liste (ol oder ul) img: eingebettetes Bild Attribute: src: Quelle/Pfad alt: alternativer Text, wenn Bild nicht l\u00e4dt id: eindeutiger Bezeichner eines Bildes fieldset: gruppiert Kontrollelemente und Labels innerhalb einer Form legend: Caption/ Beschreibung f\u00fcr den Inhalt von fieldset label: Caption f\u00fcr ein Kontrollelement/ User Interface Attribute for: gibt an f\u00fcr welches Element das Label ist, angegeben durch \u201eid\" input: f\u00fcr interaktive Kontrollelemente in Formularen, um Daten zu senden Attribute input-types: checkbox, button, hidden, mail, password, \u2026 name: Kontroll-Element-Name id: eindeutiger Bezeichner f\u00fcr input-Element placeholder: Beispieltext der \u00fcberschrieben werden kann pattern: Erlaubter Eingabetext maxlength: maximale Wortl\u00e4nge required: muss ausgef\u00fcllt werden disabled: deaktiviert (keine Eingabe m\u00f6gliche, ausgegraut) value: fester/fixer eingetragener Wert meist mit readonly readonly: nur lesbar, nicht \u00fcberschreibbar footer span: Generischer Container f\u00fcr Inline (Einzeiler), zur Gruppierung verwendbar \u00c4hnlich wie div (aber div ist Block-Element) Hervorheben von bestimmten W\u00f6rtern in Text TEIL B - CSS Allgemeine Infos CSS-Template enth\u00e4lt Regelmengen f\u00fcr Klassen/ Classes \u201e.row\" und \u201e.col-x\" Erstellte HTML Struktur-Elemente von TEIL A entsprechend als Zeile/ Spalte kennzeichnen, durch hinzuf\u00fcgen von jeweiligen class name M\u00f6gliche Aufteilung .col-x => 1/4 of main box for tagging (left box) .col-x => 3/4 of main box for discovery (right box) .col-x => 1/3 of right box for taglist (left box of discovery) .col-x => 2/3 of right box for map image (right box of discovery) Flexbox-Guide https://css-tricks.com/snippets/css/a-guide-to-flexbox/ Style-Regeln die sich auf mehrere HTML-Elemente gleich auswirken k\u00f6nnen zusammengefasst werden Nachtr\u00e4glich kann f\u00fcr Unterschiede nochmals Regeln f\u00fcr die Elemente einzeln definiert werden Style-Regeln wirken der Reihenfolge nach in der sie definiert werden Selectors Beispiele - input:not(:last-child) => wendet die folgenden Style-Regeln f\u00fcr alle Input-Felder au\u00dfer dem letzten an - input:hover => -//- wenn Mauszeiger \u00fcber Input-Feld - https://www.dropbox.com/s/h2hni9o1m1di989/CSS%20selectors%20cheatsheet.pdf?dl=0 - https://htmlcheatsheet.com/css/ Anwendung - Klassen-Selektor nutzen - Ggf. neue Klassen zu HTML-Struktur-Elementen zuf\u00fcgen Spezifisches Selektieren von Elementen innerhalb einer Klasse m\u00f6glich Z.B. wenn man nur die \u00dcberschriften innerhalb Tagging stylen m\u00f6chte und nicht die von Discovery: h2 w\u00fcrde sich auf alle h2-Elemente beziehen .main_tagging h2 bezieht sich nur auf h2-Elemente innerhalb der Klasse .main_tagging Reihenfolge wichtig: z.B. Ausrichtung soll f\u00fcr jede \u00dcberschrift gleich sein: center Aber Farbe soll unterschiedlich sein abh\u00e4ngig von Klasse M\u00f6gliche Style-Regeln Other HTML elements you have to style - \u00dcberschriften h1-h8 - fieldset - label - input Beispiel-Attribute - margin: Platz zwischen der Grenze eines Elements zur Grenze eines angrenzenden Elements - padding: Platz zwischen Element-Inhalt und Element-Grenze - border: Grenze, an der das Element endet - -bottom/-top, margin-right/-left (f\u00fcr margin, padding, border) - display: Positionierung von Elementen (block, inline) https://developer.mozilla.org/en-US/docs/Web/CSS/display?retiredLocale=de color: Farbe des Elements (letzt definierte Farbe gilt) line-heigth: H\u00f6he eines Elements https://developer.mozilla.org/en-US/docs/Web/CSS/line-height cursor: Darstellung des Mauszeigers \u00fcber einem Element https://developer.mozilla.org/en-US/docs/Web/CSS/cursor?retiredLocale=de appearance: Darstellung von UI Controls https://developer.mozilla.org/en-US/docs/Web/CSS/appearance transition: \u00dcbergang zwischen zwei Phasen/ States eines Elements Verz\u00f6gerung (Delay), Dauer (Duration), Property (Eigenschaften) https://developer.mozilla.org/en-US/docs/Web/CSS/transition?retiredLocale=de align-items: Ausrichtung aller direkter Child-Elemente https://developer.mozilla.org/en-US/docs/Web/CSS/align-items?retiredLocale=de flex-direction Gibt an, wie die Items innerhalb eines Flex-Containers angeordnet werden (axis/ direction) https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction Media-Queries: Sollte bei Handy-Bildschirmen z.B. column sein mit width = 100%, damit die Elemente untereinander rutschen Style-Regeln umsetzen f\u00fcr Header-Component Main-Component Tagging-Component Discovery-Component Footer-Component Media Queries Media-Queries https://www.w3schools.com/css/css3_mediaqueries.asp @media: Kennzeichnet Anfang einer Media-Query","title":"Laborhilfe Aufgabe_1"},{"location":"Laborhilfe/#laborhilfe-aufgabe_1","text":"","title":"Laborhilfe Aufgabe_1"},{"location":"Laborhilfe/#teil-a-html","text":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input","title":"TEIL A \u2013 HTML"},{"location":"Laborhilfe/#head-metadaten","text":"meta charset = \u201eUTF-8\": Kodierung in UTF-8 Characters meta name = \u201eviewport\": Display-Information, Display-Gr\u00f6\u00dfe vom Ger\u00e4t meta content = \u201econtent\": Enth\u00e4lt Wert vom Element gekennzeichnet durch \u201ename\" title: Beschreibung im Tab link: rel: Relationship zum verlinkten Dokmuent href: Pfad/ Link-URL","title":"Head Metadaten"},{"location":"Laborhilfe/#body","text":"Inhalt der GeoLocationApp - Header : Obere Leiste, meist mit Logo, Titel, Navigation - Main: Hauptinhalt mit Vielzahl an verschiedenen Strukturelementen - Footer : Untere Leiste meist mit Kontakt, Impressum, Copyright, Sitemap","title":"Body"},{"location":"Laborhilfe/#class-attribut","text":"Globales Attribut Durch Leerzeichen-getrennte Liste von Case-Sensitive Element-Klassen Erlauben die Auswahl und Zugang von CSS und JavaScript zu spezifischen Elementen durch Class-Selectors (z.B. documtent.getElementByClassName)","title":"Class-Attribut"},{"location":"Laborhilfe/#header","text":"nav : Section-Element einer Seite die Links zu anderen Seiten enth\u00e4lt (Navigation)","title":"Header"},{"location":"Laborhilfe/#main","text":"section : Abschnitt, meist eines Textes, sollten immer eine \u00dcberschrift haben Child -Elements: \u00dcberschriften, Formulare, div-Container, und mehr. form : Sektion mit interaktiven Controls/ Feldern, um Informationen geb\u00fcndelt zu senden Attribute id: Eindeutiger Bezeichner f\u00fcr Formular action : URL, die das Submit der gesendeten Formular-Infos bearbeitet method : http Methode mit der submitted wird Post : Daten als Request Body gesendet Get : Daten beigef\u00fcgt mit ? seperator (Seitenanfrage), ohne selber Infos zu schicken Child-Elements: fieldset h1 bis h8: \u00dcberschriften (h1 gr\u00f6\u00dfte, h8 kleinste) div: Container zur Isolierung von verschiedenen flow contents M\u00f6glich verschiedene div-Container verschieden zu Stylen Kapselt Informationen voneinander (unterschiedliche Darstellung) Flow Content : Alle Strukturelemente, die direkte Child-Elemente von \\<body> sind Kein Flow Content: \\<td>, da es nur als direkter Child von \\<table> genutzt werden kann ul: Ungeordnete Liste (unordered list = ul) mit einfachen Aufz\u00e4hlungspunkten ol : Geordnete Liste (ordered list = ol) mit Nummerierung li: Listen-Element (list item = li) von einer Liste (ol oder ul) img: eingebettetes Bild Attribute: src: Quelle/Pfad alt: alternativer Text, wenn Bild nicht l\u00e4dt id: eindeutiger Bezeichner eines Bildes fieldset: gruppiert Kontrollelemente und Labels innerhalb einer Form legend: Caption/ Beschreibung f\u00fcr den Inhalt von fieldset label: Caption f\u00fcr ein Kontrollelement/ User Interface Attribute for: gibt an f\u00fcr welches Element das Label ist, angegeben durch \u201eid\" input: f\u00fcr interaktive Kontrollelemente in Formularen, um Daten zu senden Attribute input-types: checkbox, button, hidden, mail, password, \u2026 name: Kontroll-Element-Name id: eindeutiger Bezeichner f\u00fcr input-Element placeholder: Beispieltext der \u00fcberschrieben werden kann pattern: Erlaubter Eingabetext maxlength: maximale Wortl\u00e4nge required: muss ausgef\u00fcllt werden disabled: deaktiviert (keine Eingabe m\u00f6gliche, ausgegraut) value: fester/fixer eingetragener Wert meist mit readonly readonly: nur lesbar, nicht \u00fcberschreibbar","title":"Main"},{"location":"Laborhilfe/#footer","text":"span: Generischer Container f\u00fcr Inline (Einzeiler), zur Gruppierung verwendbar \u00c4hnlich wie div (aber div ist Block-Element) Hervorheben von bestimmten W\u00f6rtern in Text","title":"footer"},{"location":"Laborhilfe/#teil-b-css","text":"","title":"TEIL B - CSS"},{"location":"Laborhilfe/#allgemeine-infos","text":"CSS-Template enth\u00e4lt Regelmengen f\u00fcr Klassen/ Classes \u201e.row\" und \u201e.col-x\" Erstellte HTML Struktur-Elemente von TEIL A entsprechend als Zeile/ Spalte kennzeichnen, durch hinzuf\u00fcgen von jeweiligen class name M\u00f6gliche Aufteilung .col-x => 1/4 of main box for tagging (left box) .col-x => 3/4 of main box for discovery (right box) .col-x => 1/3 of right box for taglist (left box of discovery) .col-x => 2/3 of right box for map image (right box of discovery)","title":"Allgemeine Infos"},{"location":"Laborhilfe/#flexbox-guide","text":"https://css-tricks.com/snippets/css/a-guide-to-flexbox/ Style-Regeln die sich auf mehrere HTML-Elemente gleich auswirken k\u00f6nnen zusammengefasst werden Nachtr\u00e4glich kann f\u00fcr Unterschiede nochmals Regeln f\u00fcr die Elemente einzeln definiert werden Style-Regeln wirken der Reihenfolge nach in der sie definiert werden","title":"Flexbox-Guide"},{"location":"Laborhilfe/#selectors","text":"Beispiele - input:not(:last-child) => wendet die folgenden Style-Regeln f\u00fcr alle Input-Felder au\u00dfer dem letzten an - input:hover => -//- wenn Mauszeiger \u00fcber Input-Feld - https://www.dropbox.com/s/h2hni9o1m1di989/CSS%20selectors%20cheatsheet.pdf?dl=0 - https://htmlcheatsheet.com/css/ Anwendung - Klassen-Selektor nutzen - Ggf. neue Klassen zu HTML-Struktur-Elementen zuf\u00fcgen Spezifisches Selektieren von Elementen innerhalb einer Klasse m\u00f6glich Z.B. wenn man nur die \u00dcberschriften innerhalb Tagging stylen m\u00f6chte und nicht die von Discovery: h2 w\u00fcrde sich auf alle h2-Elemente beziehen .main_tagging h2 bezieht sich nur auf h2-Elemente innerhalb der Klasse .main_tagging Reihenfolge wichtig: z.B. Ausrichtung soll f\u00fcr jede \u00dcberschrift gleich sein: center Aber Farbe soll unterschiedlich sein abh\u00e4ngig von Klasse","title":"Selectors"},{"location":"Laborhilfe/#mogliche-style-regeln","text":"Other HTML elements you have to style - \u00dcberschriften h1-h8 - fieldset - label - input Beispiel-Attribute - margin: Platz zwischen der Grenze eines Elements zur Grenze eines angrenzenden Elements - padding: Platz zwischen Element-Inhalt und Element-Grenze - border: Grenze, an der das Element endet - -bottom/-top, margin-right/-left (f\u00fcr margin, padding, border) - display: Positionierung von Elementen (block, inline) https://developer.mozilla.org/en-US/docs/Web/CSS/display?retiredLocale=de color: Farbe des Elements (letzt definierte Farbe gilt) line-heigth: H\u00f6he eines Elements https://developer.mozilla.org/en-US/docs/Web/CSS/line-height cursor: Darstellung des Mauszeigers \u00fcber einem Element https://developer.mozilla.org/en-US/docs/Web/CSS/cursor?retiredLocale=de appearance: Darstellung von UI Controls https://developer.mozilla.org/en-US/docs/Web/CSS/appearance transition: \u00dcbergang zwischen zwei Phasen/ States eines Elements Verz\u00f6gerung (Delay), Dauer (Duration), Property (Eigenschaften) https://developer.mozilla.org/en-US/docs/Web/CSS/transition?retiredLocale=de align-items: Ausrichtung aller direkter Child-Elemente https://developer.mozilla.org/en-US/docs/Web/CSS/align-items?retiredLocale=de","title":"M\u00f6gliche Style-Regeln"},{"location":"Laborhilfe/#flex-direction","text":"Gibt an, wie die Items innerhalb eines Flex-Containers angeordnet werden (axis/ direction) https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction Media-Queries: Sollte bei Handy-Bildschirmen z.B. column sein mit width = 100%, damit die Elemente untereinander rutschen","title":"flex-direction"},{"location":"Laborhilfe/#style-regeln-umsetzen-fur","text":"Header-Component Main-Component Tagging-Component Discovery-Component Footer-Component Media Queries","title":"Style-Regeln umsetzen f\u00fcr"},{"location":"Laborhilfe/#media-queries","text":"https://www.w3schools.com/css/css3_mediaqueries.asp @media: Kennzeichnet Anfang einer Media-Query","title":"Media-Queries"},{"location":"tools/","text":"Tools Git Git ist ein Versionierungssystem f\u00fcr Dateien und Ordner in einem Projekt. Das Repository f\u00fcr Verteilte Systeme 1 finden Sie auf GitHub: https://github.com/zirpins/vs1lab Im Folgenden sind Schritte beschrieben, die Sie zur Nutzung von Git und GitHub f\u00fcr Verteilte Systeme 1 nutzen k\u00f6nnen. Wichtig: Es besteht keine Verpflichtung zur Nutzung von Git f\u00fcr die Bearbeitung der Aufgaben. Wir empfehlen aber dennoch die Verwaltung via Git, da Kollaboration und Versionierung dadurch erheblich erleichtert werden. Git kann auch lokal zur Versionierung genutzt werden. Hierzu ist kein Account notwendig. Was ist Versionskontrolle? Versionskontrolle ist ein System, dass es erlaubt, an Programmen zusammenzuarbeiten, die Entwicklung besser nachzuverfolgen und viele weitere Dinge wie Continous Integration erm\u00f6glicht. Bei der Versionskontrolle erstellt man immer einmal wieder einen Snapshot des Projekts, gennant Commit. Diese Commits bilden einen Zeitstrahl, genannt Branch. Begriffe Begriff Erkl\u00e4rung Repository Ein Projekt, das mit Git verwaltet wird Commit Ein Snapshot des Projekts Branch Zeitstrahl aus Snapshots (stark vereinfacht) Remote Anderer Computer der eine Kopie des Repository besitzt Push Commits auf einen Branch auf einer Remote \u00fcbertragen Pull Commits von einer Remote auf einen Branch auf dem eigenen Computer \u00dcbertragen Clone Ein Repository von einer Remote auf den eigenen Computer kopieren Fork Eine Kopie eines Repository die unabh\u00e4ngig vom Original weiterentwickelt wird Fork Zwei Branches zusammenf\u00fchren Fetch Informationen \u00fcber eine Remote einholen Checkout Die Arbeitsversion des Projekts auf einen bestimmten commit oder branch setzen Visualisierung Beispiel Alice und Bob Arbeiten am gleichen Programm. Zuerst klonen sie beide eine Kopie des Repository auf ihren Computer (haben dann also GitHub als Remote eingetragen). Alice programmiert ein neues Feature und macht dabei ein paar Commits. Diese Pusht sie dann auf GitHub. Bob sieht per git fetch, dass Alice das Programm weiter entwickelt hat und synchronisiert seinen main branch per git pull mit GitHub. Nun nehmen Bob und Alice beide gleichzeitig \u00c4nderungen vor und erstellen dabei Commits. Alice pusht ihre Commits auf GitHub. Kurz danach will Bob ebenfalls seine Commits pushen, allerdings bekommt er statdessen eine Warnung von Git. W\u00fcrde Bob stur auf seine Zeitleiste bestehen w\u00fcrde er damit Alice's \u00c4nderungen \u00fcberschreiben. Deshalb muss er zuerst pullen. Git versucht dabei per git merge, automatisch einen Merge-Commit zu erstellen, der sowohl Bobs als auch Alice's \u00c4nderungen enth\u00e4lt. In der Regel funktioniert dies auch. Sollte es dazu kommen, dass Bob und Alice die gleiche Zeile bearbeitet haben entsteht ein Merge Konflict und der Nutzer muss entscheiden welche Version der Zeile er behalten m\u00f6chte. Nachdem Bob einen Merge-Commit erstellt hat, der die Arbeit beider enth\u00e4lt pusht er diesen auf GitHub, Alice pullt den Merge-Commit von GitHub um auf dem gleichen Stand zu sein wie Bob und beide arbeiten weiter. Um dauerhafte Merge-Konflikte zu vermeiden k\u00f6nnen Bob und Alice auch auf separaten Branches arbeiten, die nur selten gemerged werden (Siehe Visualisierung). Vereinfachungen Diese Erkl\u00e4rung ist stark vereinfacht. Ein branch ist technisch gesehen nur ein Pointer, die Reihenfolge der Commits ist stattdessen in den Commits gespeichert, die eine linked list bilden. Ein Commit ist auch keine vollst\u00e4ndige Kopie des Projekts, stattdessen enth\u00e4lt ein Commit nur die \u00c4nderungen, die seit dem letztden Commit gemacht wurden (wodurch git sehr speichereffizient ist) Installation von Git Windows https://git-scm.com/download/win Mac xcode-select \u2014install Linux Ubuntu sudo apt install git Arch sudo pacman -S git Konfiguration Git nutzt zur Identifizierung eines Nutzers dessen Namen sowie Email-Adresse. Nach erfolgreicher Installation k\u00f6nnen Sie in der Kommandozeile Ihres Computers folgende Befehle ausf\u00fchren, um Git zu konfigurieren: git config --global user.name \"John Doe\" git config --global user.email johndoe@example.org Authentifizierung bei GitHub Ein GitHub Account ist in der Regel sehr sicherheitskritisch, da Hacker mit bearbeitungszugriff Schadcode in ein Programm einschleusen k\u00f6nnten. Aus diesem Grund l\u00e4sst GitHub keinen Log-in per Passwort aus der Kommandozeile mehr zu und erfordert stattdessen Authentifizierungsmethoden mit h\u00f6herer Sicherheit wie ssh-keys oder personal access tokens. Umsetzung f\u00fcr das Labor Forken Beim Forken wird eine Kopie des Repository angelegt, welches dem eigenen Nutzer geh\u00f6rt. In diesem Repository k\u00f6nnen dann \u00c4nderungen vorgenommen werden, ohne das originale Repository von Herrn Dr. Zirpins zu ver\u00e4ndern. Melden Sie sich bei GitHub an und navigieren Sie zum Repository \u201evs1lab\" (Link siehe oben). Klicken Sie dann auf den Knopf \u201eFork\": Nach dem erfolgreichen \u201eForken\" finden Sie eine Kopie des Repositories unter Ihrem eigenen Nutzer (Klick auf Profilbild rechts oben, dann \u201eYour repositories\"): Nun muss das Repository noch lokal verf\u00fcgbar gemacht werden. Hierf\u00fcr kann der Befehl git clone <URL> verwendet werden. \u00d6ffnen Sie eine lokale Kommandozeile und navigieren Sie in den Ordner, in dem Sie das Repository lokal ablegen m\u00f6chten. F\u00fchren Sie dann den Befehl mit der URL zu Ihrem Fork aus: git clone https://github.com/<username>/vs1lab Nach dem erfolgreichen Klonen des Repositories auf den lokalen Rechner kann nun problemlos (auch mit mehreren Teammitgliedern) parallel am Projekt gearbeitet werden. Gemeinsam an Aufgaben arbeiten Damit mehrere Mitglieder Zugriff auf ein GitHub-Repository haben, muss dieser zuerst konfiguriert werden. Gehen Sie hierzu in GitHub auf den Tab \u201eSettings\" Ihres Repositories und laden Sie unter dem Punkt \u201eManage access\" Ihre Teammitglieder ein: Ihre Teammitglieder befolgen dann dieselben Schritte wie aus Abschnitt 2, um das Repository auf ihren lokalen Rechner zu klonen. Um parallel an Code zu arbeiten, ohne sich gegenseitig zu st\u00f6ren kann auf separaten Branches gearbeitet werden. Der Hauptbranch bei Git hei\u00dft meist \u201emaster\" (in neueren Repositories auch \u201emain\"). Die Branches selbst k\u00f6nnen frei benannt werden. Ein neuer branch kann mit git checkout -b <branch-name> erstellt werden. (Der Befehl \"checkout\" wird zum Wechseln von Branches/Commits verwendet. Das Argument \u201e-b\" erzeugt dann einen neuen Branch.) Neue \u00c4nderungen werden in einem Commit gespeichert. # Alle \u00c4nderungen aus allen Dateien f\u00fcr den n\u00e4chsten Commit vormerken git add --all # oder um nur eine datei vorzumerken git add pfad/zur/datei.js # Commit erstellen git commit -m \"Beschreibung der \u00c4nderung\" # Commit auf die GitHub remote \u00fcbertragen git push M\u00f6glicherweise beschwert sich Git, dass kein Upstream-Branch existiert. In diesem Fall m\u00fcssen Sie explizit angeben, auf welchen Branch der Push ausgef\u00fchrt werden werden soll. F\u00fcr unsere F\u00e4lle gibt es keinen Grund, nicht einfach denselben Branch zu verwenden. Der Push-Command lautet dann: # origin ist der standard remote name git push --set-upstream origin <branch-name> Commits von GitHub k\u00f6nnen mit git pull auf den eigenen branch \u00fcbertragen werden Um \u00c4nderungen von einem anderen branch auf den momentanen branch zu \u00fcbertragen kann der befehl git merge <branch name> verwendet werden. Ein Wort zum Git Tooling Neben der Kommandozeile, die wir hier kennengelernt haben, gibt es auch viele grafische Benutzeroberfl\u00e4chen, mit denen dieselben Abl\u00e4ufe erreicht werden k\u00f6nnen. VSCode und Webstorm beispielsweise binden direkt eine Git-Integration ein. Es gibt auch diverse standalone Git Oberfl\u00e4chen wie Gitahead, Sublime Merge und GitKraken. Die Wahl des Werkzeuges bleibt letztendlich Ihnen \u00fcberlassen. Hilfreiche Links Der einfache Einstieg in Git: https://rogerdudler.github.io/git-guide/index.de.html Kostenfreier Kurs: https://www.udacity.com/course/version-control-with-git--ud123 Git Dokumentation: https://git-scm.com/doc Fork synchronisieren im Detail: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork VS code Allgemeines VS-Code, Visual Studio Code oder Code-OSS * ist eine offene Entwicklungsumgebung von Microsoft (nicht zu verwechseln mit Visual Studio). Das Tool ist sehr universell ausgelegt und auf keine bestimmte Programmiersprache oder Technologie zugeschnitten. Stattdessen kann der Support f\u00fcr Sprachen oder Features \u00fcber Extensions installiert werden. So wird VS code zur IDE f\u00fcr Java, C, Web, Rust, Latex etc. VS Code vs Code-OSS Das Produkt VS Code ist eine modifizierte Version des Open-Source Editors Code-OSS. Bei Code-OSS fehlt das Microsoft-Branding, das Sammeln von Pers\u00f6nlichen Daten und aus unerkl\u00e4rlichen Gr\u00fcnden die Adresse des Extension-Marketplace. Diese Kann allerdings manuell hinzugef\u00fcgt werden Installation Windows & Mac Das Setup kann unter der folgenden Adresse heruntergeladen werden: https://code.visualstudio.com/ Linux Ubuntu sudo snap install --classic code Arch git clone https://aur.archlinux.org/visual-studio-code-bin.git cd visual-studio-code-bin makepkg -si Tips Set up f\u00fcr das labor Nach dem klonen des Forks von GitHub kann der Ordner mit Ctrl + K - O (Ctrl gedr\u00fcckt halten und w\u00e4hrenddessen hintereinander k und o dr\u00fccken) in vs code ge\u00f6ffnet werden. Wenn der Ordner das erste mal ge\u00f6ffnet wird muss er als vertrauensw\u00fcrdig best\u00e4tigt werden. N\u00fctzliche Shortcuts Keybind Funktion Ctrl + S Speichern Ctrl + P Datei Fuzzy-Finder Ctrl + Shift + P Kommando Palette Ctrl + R Wechseln zwischen oft verwendeten Projekt Ordnern Ctrl + Shift + I Dokument formattieren (Super Hilfreich!!!!) Todo noch mehr shortcuts Extensions Es gibt eine EJS extension, die die Arbeit mit EJS im Labor wesentlich vereinfacht. Die Autocompletion l\u00e4sst sich durch GitHub-Copilot oder TabNine (Bitte nur eine von beiden installieren) um einiges verbessern. Sonarlint weist automatisch auf potentiell problematischen oder fehlerhaften Code hin und bietet l\u00f6sungsans\u00e4tze an. Live server Mithilfe des Go Live Buttons unten rechts, der mit der Live Server Erweiterung installiert wurde, l\u00e4sst sich ein Web-Server starten. \u00c4nderungen an den Projektdateien werden, sobald diese gespeichert wurden, sofort im Browser sichtbar. Git VS code hat eine gute Git-Integration, die pushen, commiten und das interaktive l\u00f6sen von Merge-Konflikten erlaubt. Der Funktionsumfang kann mithilfe der extension GitLens auch erweitert werden. Remote container Die Remote Extension erlaubt es, sich mit einem Container (oder Server) zu verbinden und diesen als Entwicklungsumgebung zu nutzen. Wenn eine Verbindung zu einem Container besteht werden alle Dateien im VS Code Workspace im Container gespeichert und alle Programme, die VSC startet laufen im Container. Installation Nutzung Die obigen Schritte laden automatisch das Passende Container-Image herunter, erstellen und starten einen Container, kopieren alle Dateien in den Container und Verbinden VS Code mit dem Container. VS code merkt sich das projekt und wird es auch nach einem neustart wieder im container \u00f6ffnen. Sollte das nicht der Fall sein k\u00f6nnen Sie einfach die obigen schritte wiederholen. Die statuszeile zeigt, ob eine Verbindung zu einem Container besteht Docker Container Die Nutzererfahrung von Containern l\u00e4sst sich als \"Virtuelle Maschinen aber nicht so langsam\" beschreiben. Es sind isolierte Umgebungen, die ein eigenes Betriebssystem mitsamt den Programmen, die darin laufen enthalten. Der Gro\u00dfe Vorteil an Containern ist, dass sie sich als container images beliebig verbreiten lassen. Da ein Container sein eigenes Betriebssystem enth\u00e4lt ist garantiert dass er \u00fcberall genau so funktioniert wie auch auf dem eigenen Computer. Docker ist das meistgenutzte Programm und Format zum verwalten von Containern Container Orchestration Die Nutzung von Docker findet in der Produktion meist automatisiert durch Tools wie Kubernetes statt, die je nach bedarf Container anlegen, l\u00f6schen oder neu starten. Um die gute Performanz zu erreichen verwendet Docker einige Technologien, die nur im Linux Kernel vorhanden sind, weshalb Docker f\u00fcr Windows und Mac beide in einer virtuellen Maschine laufen m\u00fcssen. Installation Linux Arch Linux sudo pacman -S docker Ubuntu sudo apt-get remove docker docker-engine docker.io containerd runc sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io Windows Das Setup von Docker f\u00fcr Windows kann unter https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe heruntergeladen werden. Die virtuelle Maschine Diese allerdings mithilfe von WSL2 um eini Mac command -v brew || /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" brew cask install docker Nutzung Es gibt eine Vielzahl von M\u00f6glichkeiten, Docker zu nutzen. Die Standard-Installation von Docker kommt mit dem Terminal Command docker und es sind interaktive terminal Oberfl\u00e4chen wie lazydocker verf\u00fcgbar, allerdings gibt es auch grafische Oberfl\u00e4chen wie die Docker extension f\u00fcr VS-Code, Docker Desktop. GUI vs Kommandozeile Es ist zu empfehlen, zumindest ein wenig Erfahrung mit der Kommandozeile von Docker oder lazydocker zu haben, da Docker meist auf dem Server genutzt wird und Server in der Regel nur \u00fcber die Kommandozeile bedient werden. Debuggen in Google Chrome Chrome, als auch weitere Browser, bieten eine Vielzahl von verschiedenen Entwicklertools an. Die Entwicklungstools werden mit F12 oder \u00fcber Einstellungen -> Weitere Tools -> Entwicklertools ge\u00f6ffnet. \u00dcber die Tabs k\u00f6nnen die Verschiedenen Tools aufgerufen werden. Im rechten Bereich sind weitere Einstellungen wie die Ausrichtung der Tools m\u00f6glich. Elements In Elements wird der aktuelle DOM Baum angezeigt und Chrome bietet verschiedene M\u00f6glichkeiten um den Baum zu manipulieren. Mit einem Rechtsklick auf ein HTML Element wird die Option angezeigt. Hier im Bild, im rechten Teil von Elements, werden die aktuellen Styles und weitere Einstellungen f\u00fcr eine Node angezeigt. Im Styles Bereich k\u00f6nnen die vorhandenen CSS Eintr\u00e4ge manipuliert oder es k\u00f6nnen eigene Regeln bzw. Attribute hinzugef\u00fcgt werden. Console Gibt verschiedene Nachrichten des laufenden JS-Codes aus. Bei Fehlern im JS-Code, werden diese in der Console mit einem Stack-Trace ausgegeben. Auch einfache Informationen oder Warnungen werden dort ausgegeben. F\u00fcr die Console kann ein level angegeben werden, welches besagt, welche Nachrichten angezeigt werden. Oben rechts befinden sich noch weitere Einstellungsm\u00f6glichkeiten f\u00fcr die Console In der Console kann auch JS-Code ausgef\u00fchrt werden. Mit console.log() lassen sich aus dem Code Nachrichten und Werte ausgeben. Mit console.error() werden diese als Fehler formatiert und mit console.table() kann man sich die Werte eines Arrays formatiert ausgeben lassen. Sources In Sources werden alle geladenen Inhalte und die Debugging \u00dcbersicht angezeigt. Durch das \u00d6ffnen einer Datei k\u00f6nnen Breakpoints gesetzt werden. Alternativ kann man im Programmcode selbst (also in der IDE oder Editor) den Befehlsaufruf \"debugger;\" hinzuf\u00fcgen um einen Breakpoint zu setzen. Auf der rechten Seite befinden sich die bekannten Debugging-M\u00f6glichkeiten, wie zum Beispiel das Fortsetzen bis zum n\u00e4chsten Breakpoint, Funktionsaufrufe zu \u00fcberspringen, hinein oder heraus zu springen. Network Zeichnet den Netzwerkverkehr zwischen Webseite und Server auf. Es wird dabei der Request, Response Header und die ben\u00f6tigte Zeit aufgezeichnet. Auch der Response Body wird angezeigt und formatiert in der ab Preview angezeigt. Es werden auch mehrere Filteroptionen angeboten, um einen \u00dcberblick beim Netzwerkverkehr zu haben. Wichtig kann auch die Checkbox \"Disable cache\" sein, um m\u00f6gliche Fehler beim Entwickeln durch zu strenges Caching des Browsers zu vermeiden. Weitere Informationen findet ihr hier: https://developer.chrome.com/docs/devtools/","title":"Tools"},{"location":"tools/#tools","text":"","title":"Tools"},{"location":"tools/#git","text":"Git ist ein Versionierungssystem f\u00fcr Dateien und Ordner in einem Projekt. Das Repository f\u00fcr Verteilte Systeme 1 finden Sie auf GitHub: https://github.com/zirpins/vs1lab Im Folgenden sind Schritte beschrieben, die Sie zur Nutzung von Git und GitHub f\u00fcr Verteilte Systeme 1 nutzen k\u00f6nnen. Wichtig: Es besteht keine Verpflichtung zur Nutzung von Git f\u00fcr die Bearbeitung der Aufgaben. Wir empfehlen aber dennoch die Verwaltung via Git, da Kollaboration und Versionierung dadurch erheblich erleichtert werden. Git kann auch lokal zur Versionierung genutzt werden. Hierzu ist kein Account notwendig.","title":"Git"},{"location":"tools/#was-ist-versionskontrolle","text":"Versionskontrolle ist ein System, dass es erlaubt, an Programmen zusammenzuarbeiten, die Entwicklung besser nachzuverfolgen und viele weitere Dinge wie Continous Integration erm\u00f6glicht. Bei der Versionskontrolle erstellt man immer einmal wieder einen Snapshot des Projekts, gennant Commit. Diese Commits bilden einen Zeitstrahl, genannt Branch.","title":"Was ist Versionskontrolle?"},{"location":"tools/#begriffe","text":"Begriff Erkl\u00e4rung Repository Ein Projekt, das mit Git verwaltet wird Commit Ein Snapshot des Projekts Branch Zeitstrahl aus Snapshots (stark vereinfacht) Remote Anderer Computer der eine Kopie des Repository besitzt Push Commits auf einen Branch auf einer Remote \u00fcbertragen Pull Commits von einer Remote auf einen Branch auf dem eigenen Computer \u00dcbertragen Clone Ein Repository von einer Remote auf den eigenen Computer kopieren Fork Eine Kopie eines Repository die unabh\u00e4ngig vom Original weiterentwickelt wird Fork Zwei Branches zusammenf\u00fchren Fetch Informationen \u00fcber eine Remote einholen Checkout Die Arbeitsversion des Projekts auf einen bestimmten commit oder branch setzen","title":"Begriffe"},{"location":"tools/#visualisierung","text":"","title":"Visualisierung"},{"location":"tools/#beispiel","text":"Alice und Bob Arbeiten am gleichen Programm. Zuerst klonen sie beide eine Kopie des Repository auf ihren Computer (haben dann also GitHub als Remote eingetragen). Alice programmiert ein neues Feature und macht dabei ein paar Commits. Diese Pusht sie dann auf GitHub. Bob sieht per git fetch, dass Alice das Programm weiter entwickelt hat und synchronisiert seinen main branch per git pull mit GitHub. Nun nehmen Bob und Alice beide gleichzeitig \u00c4nderungen vor und erstellen dabei Commits. Alice pusht ihre Commits auf GitHub. Kurz danach will Bob ebenfalls seine Commits pushen, allerdings bekommt er statdessen eine Warnung von Git. W\u00fcrde Bob stur auf seine Zeitleiste bestehen w\u00fcrde er damit Alice's \u00c4nderungen \u00fcberschreiben. Deshalb muss er zuerst pullen. Git versucht dabei per git merge, automatisch einen Merge-Commit zu erstellen, der sowohl Bobs als auch Alice's \u00c4nderungen enth\u00e4lt. In der Regel funktioniert dies auch. Sollte es dazu kommen, dass Bob und Alice die gleiche Zeile bearbeitet haben entsteht ein Merge Konflict und der Nutzer muss entscheiden welche Version der Zeile er behalten m\u00f6chte. Nachdem Bob einen Merge-Commit erstellt hat, der die Arbeit beider enth\u00e4lt pusht er diesen auf GitHub, Alice pullt den Merge-Commit von GitHub um auf dem gleichen Stand zu sein wie Bob und beide arbeiten weiter. Um dauerhafte Merge-Konflikte zu vermeiden k\u00f6nnen Bob und Alice auch auf separaten Branches arbeiten, die nur selten gemerged werden (Siehe Visualisierung). Vereinfachungen Diese Erkl\u00e4rung ist stark vereinfacht. Ein branch ist technisch gesehen nur ein Pointer, die Reihenfolge der Commits ist stattdessen in den Commits gespeichert, die eine linked list bilden. Ein Commit ist auch keine vollst\u00e4ndige Kopie des Projekts, stattdessen enth\u00e4lt ein Commit nur die \u00c4nderungen, die seit dem letztden Commit gemacht wurden (wodurch git sehr speichereffizient ist)","title":"Beispiel"},{"location":"tools/#installation-von-git","text":"","title":"Installation von Git"},{"location":"tools/#windows","text":"https://git-scm.com/download/win","title":"Windows"},{"location":"tools/#mac","text":"xcode-select \u2014install","title":"Mac"},{"location":"tools/#linux","text":"","title":"Linux"},{"location":"tools/#ubuntu","text":"sudo apt install git","title":"Ubuntu"},{"location":"tools/#arch","text":"sudo pacman -S git","title":"Arch"},{"location":"tools/#konfiguration","text":"Git nutzt zur Identifizierung eines Nutzers dessen Namen sowie Email-Adresse. Nach erfolgreicher Installation k\u00f6nnen Sie in der Kommandozeile Ihres Computers folgende Befehle ausf\u00fchren, um Git zu konfigurieren: git config --global user.name \"John Doe\" git config --global user.email johndoe@example.org Authentifizierung bei GitHub Ein GitHub Account ist in der Regel sehr sicherheitskritisch, da Hacker mit bearbeitungszugriff Schadcode in ein Programm einschleusen k\u00f6nnten. Aus diesem Grund l\u00e4sst GitHub keinen Log-in per Passwort aus der Kommandozeile mehr zu und erfordert stattdessen Authentifizierungsmethoden mit h\u00f6herer Sicherheit wie ssh-keys oder personal access tokens.","title":"Konfiguration"},{"location":"tools/#umsetzung-fur-das-labor","text":"","title":"Umsetzung f\u00fcr das Labor"},{"location":"tools/#forken","text":"Beim Forken wird eine Kopie des Repository angelegt, welches dem eigenen Nutzer geh\u00f6rt. In diesem Repository k\u00f6nnen dann \u00c4nderungen vorgenommen werden, ohne das originale Repository von Herrn Dr. Zirpins zu ver\u00e4ndern. Melden Sie sich bei GitHub an und navigieren Sie zum Repository \u201evs1lab\" (Link siehe oben). Klicken Sie dann auf den Knopf \u201eFork\": Nach dem erfolgreichen \u201eForken\" finden Sie eine Kopie des Repositories unter Ihrem eigenen Nutzer (Klick auf Profilbild rechts oben, dann \u201eYour repositories\"): Nun muss das Repository noch lokal verf\u00fcgbar gemacht werden. Hierf\u00fcr kann der Befehl git clone <URL> verwendet werden. \u00d6ffnen Sie eine lokale Kommandozeile und navigieren Sie in den Ordner, in dem Sie das Repository lokal ablegen m\u00f6chten. F\u00fchren Sie dann den Befehl mit der URL zu Ihrem Fork aus: git clone https://github.com/<username>/vs1lab Nach dem erfolgreichen Klonen des Repositories auf den lokalen Rechner kann nun problemlos (auch mit mehreren Teammitgliedern) parallel am Projekt gearbeitet werden.","title":"Forken"},{"location":"tools/#gemeinsam-an-aufgaben-arbeiten","text":"Damit mehrere Mitglieder Zugriff auf ein GitHub-Repository haben, muss dieser zuerst konfiguriert werden. Gehen Sie hierzu in GitHub auf den Tab \u201eSettings\" Ihres Repositories und laden Sie unter dem Punkt \u201eManage access\" Ihre Teammitglieder ein: Ihre Teammitglieder befolgen dann dieselben Schritte wie aus Abschnitt 2, um das Repository auf ihren lokalen Rechner zu klonen. Um parallel an Code zu arbeiten, ohne sich gegenseitig zu st\u00f6ren kann auf separaten Branches gearbeitet werden. Der Hauptbranch bei Git hei\u00dft meist \u201emaster\" (in neueren Repositories auch \u201emain\"). Die Branches selbst k\u00f6nnen frei benannt werden. Ein neuer branch kann mit git checkout -b <branch-name> erstellt werden. (Der Befehl \"checkout\" wird zum Wechseln von Branches/Commits verwendet. Das Argument \u201e-b\" erzeugt dann einen neuen Branch.) Neue \u00c4nderungen werden in einem Commit gespeichert. # Alle \u00c4nderungen aus allen Dateien f\u00fcr den n\u00e4chsten Commit vormerken git add --all # oder um nur eine datei vorzumerken git add pfad/zur/datei.js # Commit erstellen git commit -m \"Beschreibung der \u00c4nderung\" # Commit auf die GitHub remote \u00fcbertragen git push M\u00f6glicherweise beschwert sich Git, dass kein Upstream-Branch existiert. In diesem Fall m\u00fcssen Sie explizit angeben, auf welchen Branch der Push ausgef\u00fchrt werden werden soll. F\u00fcr unsere F\u00e4lle gibt es keinen Grund, nicht einfach denselben Branch zu verwenden. Der Push-Command lautet dann: # origin ist der standard remote name git push --set-upstream origin <branch-name> Commits von GitHub k\u00f6nnen mit git pull auf den eigenen branch \u00fcbertragen werden Um \u00c4nderungen von einem anderen branch auf den momentanen branch zu \u00fcbertragen kann der befehl git merge <branch name> verwendet werden.","title":"Gemeinsam an Aufgaben arbeiten"},{"location":"tools/#ein-wort-zum-git-tooling","text":"Neben der Kommandozeile, die wir hier kennengelernt haben, gibt es auch viele grafische Benutzeroberfl\u00e4chen, mit denen dieselben Abl\u00e4ufe erreicht werden k\u00f6nnen. VSCode und Webstorm beispielsweise binden direkt eine Git-Integration ein. Es gibt auch diverse standalone Git Oberfl\u00e4chen wie Gitahead, Sublime Merge und GitKraken. Die Wahl des Werkzeuges bleibt letztendlich Ihnen \u00fcberlassen. Hilfreiche Links Der einfache Einstieg in Git: https://rogerdudler.github.io/git-guide/index.de.html Kostenfreier Kurs: https://www.udacity.com/course/version-control-with-git--ud123 Git Dokumentation: https://git-scm.com/doc Fork synchronisieren im Detail: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork","title":"Ein Wort zum Git Tooling"},{"location":"tools/#vs-code","text":"","title":"VS code"},{"location":"tools/#allgemeines","text":"VS-Code, Visual Studio Code oder Code-OSS * ist eine offene Entwicklungsumgebung von Microsoft (nicht zu verwechseln mit Visual Studio). Das Tool ist sehr universell ausgelegt und auf keine bestimmte Programmiersprache oder Technologie zugeschnitten. Stattdessen kann der Support f\u00fcr Sprachen oder Features \u00fcber Extensions installiert werden. So wird VS code zur IDE f\u00fcr Java, C, Web, Rust, Latex etc. VS Code vs Code-OSS Das Produkt VS Code ist eine modifizierte Version des Open-Source Editors Code-OSS. Bei Code-OSS fehlt das Microsoft-Branding, das Sammeln von Pers\u00f6nlichen Daten und aus unerkl\u00e4rlichen Gr\u00fcnden die Adresse des Extension-Marketplace. Diese Kann allerdings manuell hinzugef\u00fcgt werden","title":"Allgemeines"},{"location":"tools/#installation","text":"","title":"Installation"},{"location":"tools/#windows-mac","text":"Das Setup kann unter der folgenden Adresse heruntergeladen werden: https://code.visualstudio.com/","title":"Windows &amp; Mac"},{"location":"tools/#linux_1","text":"Ubuntu sudo snap install --classic code Arch git clone https://aur.archlinux.org/visual-studio-code-bin.git cd visual-studio-code-bin makepkg -si","title":"Linux"},{"location":"tools/#tips","text":"","title":"Tips"},{"location":"tools/#set-up-fur-das-labor","text":"Nach dem klonen des Forks von GitHub kann der Ordner mit Ctrl + K - O (Ctrl gedr\u00fcckt halten und w\u00e4hrenddessen hintereinander k und o dr\u00fccken) in vs code ge\u00f6ffnet werden. Wenn der Ordner das erste mal ge\u00f6ffnet wird muss er als vertrauensw\u00fcrdig best\u00e4tigt werden.","title":"Set up f\u00fcr das labor"},{"location":"tools/#nutzliche-shortcuts","text":"Keybind Funktion Ctrl + S Speichern Ctrl + P Datei Fuzzy-Finder Ctrl + Shift + P Kommando Palette Ctrl + R Wechseln zwischen oft verwendeten Projekt Ordnern Ctrl + Shift + I Dokument formattieren (Super Hilfreich!!!!) Todo noch mehr shortcuts","title":"N\u00fctzliche Shortcuts"},{"location":"tools/#extensions","text":"Es gibt eine EJS extension, die die Arbeit mit EJS im Labor wesentlich vereinfacht. Die Autocompletion l\u00e4sst sich durch GitHub-Copilot oder TabNine (Bitte nur eine von beiden installieren) um einiges verbessern. Sonarlint weist automatisch auf potentiell problematischen oder fehlerhaften Code hin und bietet l\u00f6sungsans\u00e4tze an. Live server Mithilfe des Go Live Buttons unten rechts, der mit der Live Server Erweiterung installiert wurde, l\u00e4sst sich ein Web-Server starten. \u00c4nderungen an den Projektdateien werden, sobald diese gespeichert wurden, sofort im Browser sichtbar.","title":"Extensions"},{"location":"tools/#git_1","text":"VS code hat eine gute Git-Integration, die pushen, commiten und das interaktive l\u00f6sen von Merge-Konflikten erlaubt. Der Funktionsumfang kann mithilfe der extension GitLens auch erweitert werden.","title":"Git"},{"location":"tools/#remote-container","text":"Die Remote Extension erlaubt es, sich mit einem Container (oder Server) zu verbinden und diesen als Entwicklungsumgebung zu nutzen. Wenn eine Verbindung zu einem Container besteht werden alle Dateien im VS Code Workspace im Container gespeichert und alle Programme, die VSC startet laufen im Container.","title":"Remote container"},{"location":"tools/#installation_1","text":"","title":"Installation"},{"location":"tools/#nutzung","text":"Die obigen Schritte laden automatisch das Passende Container-Image herunter, erstellen und starten einen Container, kopieren alle Dateien in den Container und Verbinden VS Code mit dem Container. VS code merkt sich das projekt und wird es auch nach einem neustart wieder im container \u00f6ffnen. Sollte das nicht der Fall sein k\u00f6nnen Sie einfach die obigen schritte wiederholen. Die statuszeile zeigt, ob eine Verbindung zu einem Container besteht","title":"Nutzung"},{"location":"tools/#docker","text":"","title":"Docker"},{"location":"tools/#container","text":"Die Nutzererfahrung von Containern l\u00e4sst sich als \"Virtuelle Maschinen aber nicht so langsam\" beschreiben. Es sind isolierte Umgebungen, die ein eigenes Betriebssystem mitsamt den Programmen, die darin laufen enthalten. Der Gro\u00dfe Vorteil an Containern ist, dass sie sich als container images beliebig verbreiten lassen. Da ein Container sein eigenes Betriebssystem enth\u00e4lt ist garantiert dass er \u00fcberall genau so funktioniert wie auch auf dem eigenen Computer. Docker ist das meistgenutzte Programm und Format zum verwalten von Containern Container Orchestration Die Nutzung von Docker findet in der Produktion meist automatisiert durch Tools wie Kubernetes statt, die je nach bedarf Container anlegen, l\u00f6schen oder neu starten. Um die gute Performanz zu erreichen verwendet Docker einige Technologien, die nur im Linux Kernel vorhanden sind, weshalb Docker f\u00fcr Windows und Mac beide in einer virtuellen Maschine laufen m\u00fcssen.","title":"Container"},{"location":"tools/#installation_2","text":"","title":"Installation"},{"location":"tools/#linux_2","text":"Arch Linux sudo pacman -S docker Ubuntu sudo apt-get remove docker docker-engine docker.io containerd runc sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io","title":"Linux"},{"location":"tools/#windows_1","text":"Das Setup von Docker f\u00fcr Windows kann unter https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe heruntergeladen werden. Die virtuelle Maschine Diese allerdings mithilfe von WSL2 um eini","title":"Windows"},{"location":"tools/#mac_1","text":"command -v brew || /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" brew cask install docker","title":"Mac"},{"location":"tools/#nutzung_1","text":"Es gibt eine Vielzahl von M\u00f6glichkeiten, Docker zu nutzen. Die Standard-Installation von Docker kommt mit dem Terminal Command docker und es sind interaktive terminal Oberfl\u00e4chen wie lazydocker verf\u00fcgbar, allerdings gibt es auch grafische Oberfl\u00e4chen wie die Docker extension f\u00fcr VS-Code, Docker Desktop. GUI vs Kommandozeile Es ist zu empfehlen, zumindest ein wenig Erfahrung mit der Kommandozeile von Docker oder lazydocker zu haben, da Docker meist auf dem Server genutzt wird und Server in der Regel nur \u00fcber die Kommandozeile bedient werden.","title":"Nutzung"},{"location":"tools/#debuggen-in-google-chrome","text":"Chrome, als auch weitere Browser, bieten eine Vielzahl von verschiedenen Entwicklertools an. Die Entwicklungstools werden mit F12 oder \u00fcber Einstellungen -> Weitere Tools -> Entwicklertools ge\u00f6ffnet. \u00dcber die Tabs k\u00f6nnen die Verschiedenen Tools aufgerufen werden. Im rechten Bereich sind weitere Einstellungen wie die Ausrichtung der Tools m\u00f6glich.","title":"Debuggen in Google Chrome"},{"location":"tools/#elements","text":"In Elements wird der aktuelle DOM Baum angezeigt und Chrome bietet verschiedene M\u00f6glichkeiten um den Baum zu manipulieren. Mit einem Rechtsklick auf ein HTML Element wird die Option angezeigt. Hier im Bild, im rechten Teil von Elements, werden die aktuellen Styles und weitere Einstellungen f\u00fcr eine Node angezeigt. Im Styles Bereich k\u00f6nnen die vorhandenen CSS Eintr\u00e4ge manipuliert oder es k\u00f6nnen eigene Regeln bzw. Attribute hinzugef\u00fcgt werden.","title":"Elements"},{"location":"tools/#console","text":"Gibt verschiedene Nachrichten des laufenden JS-Codes aus. Bei Fehlern im JS-Code, werden diese in der Console mit einem Stack-Trace ausgegeben. Auch einfache Informationen oder Warnungen werden dort ausgegeben. F\u00fcr die Console kann ein level angegeben werden, welches besagt, welche Nachrichten angezeigt werden. Oben rechts befinden sich noch weitere Einstellungsm\u00f6glichkeiten f\u00fcr die Console In der Console kann auch JS-Code ausgef\u00fchrt werden. Mit console.log() lassen sich aus dem Code Nachrichten und Werte ausgeben. Mit console.error() werden diese als Fehler formatiert und mit console.table() kann man sich die Werte eines Arrays formatiert ausgeben lassen.","title":"Console"},{"location":"tools/#sources","text":"In Sources werden alle geladenen Inhalte und die Debugging \u00dcbersicht angezeigt. Durch das \u00d6ffnen einer Datei k\u00f6nnen Breakpoints gesetzt werden. Alternativ kann man im Programmcode selbst (also in der IDE oder Editor) den Befehlsaufruf \"debugger;\" hinzuf\u00fcgen um einen Breakpoint zu setzen. Auf der rechten Seite befinden sich die bekannten Debugging-M\u00f6glichkeiten, wie zum Beispiel das Fortsetzen bis zum n\u00e4chsten Breakpoint, Funktionsaufrufe zu \u00fcberspringen, hinein oder heraus zu springen.","title":"Sources"},{"location":"tools/#network","text":"Zeichnet den Netzwerkverkehr zwischen Webseite und Server auf. Es wird dabei der Request, Response Header und die ben\u00f6tigte Zeit aufgezeichnet. Auch der Response Body wird angezeigt und formatiert in der ab Preview angezeigt. Es werden auch mehrere Filteroptionen angeboten, um einen \u00dcberblick beim Netzwerkverkehr zu haben. Wichtig kann auch die Checkbox \"Disable cache\" sein, um m\u00f6gliche Fehler beim Entwickeln durch zu strenges Caching des Browsers zu vermeiden. Weitere Informationen findet ihr hier: https://developer.chrome.com/docs/devtools/","title":"Network"},{"location":"z_github_desktop/","text":"GitHub Desktop Dies ist eine Schritt f\u00fcr Schritt Anleitung, um das Labor mit GitHub und GitHub Desktop zu verwalten. GitHub Desktop ist eine grafische Benutzeroberfl\u00e4che zum Verwalten von Git-Repositories und kann auf https://desktop.github.com installiert werden. Zuerst muss das Repository geforkt werden um eine Kopie davon auf dem eigenen Account zu erhalten. Dazu muss rechts oben auf Fork geklickt werden. Anschlie\u00dfend \u00f6ffnet sich die GitHub-Seite der eigenen Kopie des Projekts. Dieses kann nun mit GitHub Desktop heruntergeladen werden. Auf der eigenen Repository-Seite, also dem geforkten Projekt, muss man nun auf Code und anschlie\u00dfend auf Open with GitHub Desktop klicken. Daraufhin \u00f6ffnet sich ein Dialog in GitHub Desktop, der einstellt wohin die Dateien geladen werden sollen. Mit dem Best\u00e4tigen durch Clone werden die Dateien entsprechend heruntergeladen. Anschlie\u00dfend \u00f6ffnet sich das Repository und fragt, wie der Fork genutzt wird. W\u00e4hle dabei For my own purposes aus und best\u00e4tige mit Continue . Mit dem Button Current Branch l\u00e4sst sich der aktuelle Branch wechseln oder neue Branches erstellen. Die aktuellen \u00c4nderungen sind links bei Changes gelistet und k\u00f6nnen zusammen mit einer Commit-Nachricht auf den aktuellen Branch gepusht werden. Den aktuellen Stand kann man mit dem Fetch origin bzw. dem Pull origin Button herunterladen, falls Aktualisierungen im Repository vorhanden sind. Um weitere Benutzer hinzuf\u00fcgen zu k\u00f6nnen, muss man auf der eigenen Projektseite im Browser auf Settings -> Manage access -> Invite a collaborator klicken und den entsprechenden Benutzernamen eingeben. Hinzugef\u00fcgte Benutzer finden das Projekt in ihrer GitHub \u00dcbersichtsseite und k\u00f6nnen von dort aus den Schritten befolgen das Projekt mithilfe von GitHub Desktop herunterzuladen.","title":"GitHub Desktop"},{"location":"z_github_desktop/#github-desktop","text":"Dies ist eine Schritt f\u00fcr Schritt Anleitung, um das Labor mit GitHub und GitHub Desktop zu verwalten. GitHub Desktop ist eine grafische Benutzeroberfl\u00e4che zum Verwalten von Git-Repositories und kann auf https://desktop.github.com installiert werden. Zuerst muss das Repository geforkt werden um eine Kopie davon auf dem eigenen Account zu erhalten. Dazu muss rechts oben auf Fork geklickt werden. Anschlie\u00dfend \u00f6ffnet sich die GitHub-Seite der eigenen Kopie des Projekts. Dieses kann nun mit GitHub Desktop heruntergeladen werden. Auf der eigenen Repository-Seite, also dem geforkten Projekt, muss man nun auf Code und anschlie\u00dfend auf Open with GitHub Desktop klicken. Daraufhin \u00f6ffnet sich ein Dialog in GitHub Desktop, der einstellt wohin die Dateien geladen werden sollen. Mit dem Best\u00e4tigen durch Clone werden die Dateien entsprechend heruntergeladen. Anschlie\u00dfend \u00f6ffnet sich das Repository und fragt, wie der Fork genutzt wird. W\u00e4hle dabei For my own purposes aus und best\u00e4tige mit Continue . Mit dem Button Current Branch l\u00e4sst sich der aktuelle Branch wechseln oder neue Branches erstellen. Die aktuellen \u00c4nderungen sind links bei Changes gelistet und k\u00f6nnen zusammen mit einer Commit-Nachricht auf den aktuellen Branch gepusht werden. Den aktuellen Stand kann man mit dem Fetch origin bzw. dem Pull origin Button herunterladen, falls Aktualisierungen im Repository vorhanden sind. Um weitere Benutzer hinzuf\u00fcgen zu k\u00f6nnen, muss man auf der eigenen Projektseite im Browser auf Settings -> Manage access -> Invite a collaborator klicken und den entsprechenden Benutzernamen eingeben. Hinzugef\u00fcgte Benutzer finden das Projekt in ihrer GitHub \u00dcbersichtsseite und k\u00f6nnen von dort aus den Schritten befolgen das Projekt mithilfe von GitHub Desktop herunterzuladen.","title":"GitHub Desktop"}]}